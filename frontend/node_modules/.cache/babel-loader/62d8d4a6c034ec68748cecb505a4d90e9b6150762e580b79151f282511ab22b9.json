{"ast":null,"code":"import { RECEIVE_RIFF_LIST, LOAD_USER_DATA } from '../actions/index.js';\nconst useridReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case RECEIVE_RIFF_LIST:\n      return action.payload.user_id || state;\n    // hacky but added because no user-id is returned for view riffs\n    case LOAD_USER_DATA:\n      return action.payload.userid;\n    // so inconsistent\n    default:\n      return state;\n  }\n};\nexport default useridReducer;","map":{"version":3,"names":["RECEIVE_RIFF_LIST","LOAD_USER_DATA","useridReducer","state","action","type","payload","user_id","userid"],"sources":["/Users/davidnewberry/Documents/test_rails/frontend/src/reducers/userid-reducer.js"],"sourcesContent":["import { RECEIVE_RIFF_LIST, LOAD_USER_DATA } from '../actions/index.js';\n\nconst useridReducer = (state = null, action) => {\n  switch (action.type) {\n    case RECEIVE_RIFF_LIST:\n      return action.payload.user_id || state; // hacky but added because no user-id is returned for view riffs\n    case LOAD_USER_DATA:\n      return action.payload.userid; // so inconsistent\n    default:\n      return state;\n  }\n};\n\nexport default useridReducer;\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,cAAc,QAAQ,qBAAqB;AAEvE,MAAMC,aAAa,GAAG,YAA0B;EAAA,IAAzBC,KAAK,uEAAG,IAAI;EAAA,IAAEC,MAAM;EACzC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,iBAAiB;MACpB,OAAOI,MAAM,CAACE,OAAO,CAACC,OAAO,IAAIJ,KAAK;IAAE;IAC1C,KAAKF,cAAc;MACjB,OAAOG,MAAM,CAACE,OAAO,CAACE,MAAM;IAAE;IAChC;MACE,OAAOL,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}